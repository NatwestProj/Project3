version: 2.1
orbs: 
  slack: circleci/slack@4.5.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here 
      workflow_id:
        type: string  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            # exit 1
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here 
      workflow_id:
        type: string    
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: 2db9d5d0-b0ea-44ee-bd6a-cadb9cc7c1be" --request GET https:/kvdb.io/GSRrQJrNKcHQh3tpH4GTJG/values/migrations-<< parameters.workflow_id >>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              #  Add revert code here. You can find this in the Getting Started section.
              # exit 1
              npm run migration:revert
            fi            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test.
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build   

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Analyze frontend
          command: |
            cd frontend
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Analyze backend.
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
            
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
              
      - run:
          name: Add .env vars to backend distro
          command: |
            echo ENVIRONMENT=development > backend/.env
            echo TYPEORM_CONNECTION=postgres >> backend/.env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=development >> "backend/.env"
      - restore_cache:
          keys: [backend-build]
      - persist_to_workspace:
          root: ~/project
          paths:
            - .circleci/ansible/inventory.txt
            - backend/
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["e6:26:81:ee:ad:55:14:27:04:ae:35:a2:5b:9d:03:5b"]
      # attach workspace
      - attach_workspace:
          at: ~/project
      - run:
          name: Install ansible.
          command: |
            apk add --update ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Check there is .env file at workspace.
          command: cat backend/.env
      - run:
          name: Configure server with ansible
          no_output_timeout: 30m
          command: |
            cd .circleci/ansible
            echo "Inventory content"
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/project
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          no_output_timeout: 7m
          command: |
            pwd
            ls
            #cd backend && npm run migrations | tee migrations-${CIRCLE_WORKFLOW_ID}.txt
            cd backend
            npm install
            cat .env
            npm run migrations | tee migrations-${CIRCLE_WORKFLOW_ID}.txt
            cat migrations-${CIRCLE_WORKFLOW_ID}.txt
      - run:
          name: Send migration results
          command: |
            cd backend
            if grep -q "success" migrations-${CIRCLE_WORKFLOW_ID}.txt
            then
              curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https:/kvdb.io/GSRrQJrNKcHQh3tpH4GTJG/values/migrations-${CIRCLE_WORKFLOW_ID:0:7} -d "success" -k
            else
              curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "0" https:/kvdb.io/GSRrQJrNKcHQh3tpH4GTJG/values/migrations-${CIRCLE_WORKFLOW_ID:0:7} -d "fail" -k
            fi
            echo Key: migrations-${CIRCLE_WORKFLOW_ID:0:7}
            
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: circleci/python:3.8.2
    steps:
      # Checkout code from git
      - checkout
      # attach workspace 
      - attach_workspace:
          at: ~/project
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt-get --allow-releaseinfo-change update
            sudo apt-get install tar
            sudo apt-get install gzip
            sudo apt-get install ansible
            sudo apt-get install nodejs
            sudo apt-get install npm
            
            pip install awscli
      - run:
          name: Get frontend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"        
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"    
          
  deploy-backend:
    docker:
      # Docker image here that supports AWS CLI
      - image: circleci/python:3.8.2
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["e6:26:81:ee:ad:55:14:27:04:ae:35:a2:5b:9d:03:5b"]
      # attach workspace 
      - attach_workspace:
          at: ~/project
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt-get --allow-releaseinfo-change update
            sudo apt-get install tar
            sudo apt-get install gzip
            sudo apt-get install ansible
            sudo apt-get install nodejs
            sudo apt-get install npm
            
            pip install awscli
                       
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"        
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 
          
  smoke-test:
    docker:
      # Lightweight Docker image
      - image: python:3.7-alpine3.11 
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Get backend url and smoke test
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            curl "${API_URL}/api/status"
      - run:
          name: Frontend smoke test.
          command: |
            # your code here         
            URL="https://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3.us-east-1.amazonaws.com/index.html#/employees"           
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"        
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"         
          
            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
